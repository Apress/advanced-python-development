from typing import Any, Iterable, List, Optional, Tuple, TypeVar, Generic

T_value = TypeVar('T_value')

class Sensor(Generic[T_value]):
    title: str
    def value(self) -> T_value: ...
    @classmethod
    def format(cls: Any, value: T_value) -> str: ...

class PythonVersion(Sensor[Any]):
    title: str = ...
    def value(self) -> Any: ...
    @classmethod
    def format(cls: Any, value: Any) -> str: ...

class IPAddresses(Sensor[Iterable[Tuple[str, str]]]):
    title: str = ...
    FAMILIES: Any = ...
    def value(self) -> List[Tuple[str, str]]: ...
    @classmethod
    def format(cls: Any, value: Iterable[Tuple[str, str]]) -> str: ...

class CPULoad(Sensor[float]):
    title: str = ...
    def value(self) -> float: ...
    @classmethod
    def format(cls: Any, value: float) -> str: ...

class RAMAvailable(Sensor[int]):
    title: str = ...
    UNITS: Any = ...
    UNIT_SIZE: Any = ...
    def value(self) -> int: ...
    @classmethod
    def format(cls: Any, value: int) -> str: ...

class ACStatus(Sensor[Optional[bool]]):
    title: str = ...
    def value(self) -> Optional[bool]: ...
    @classmethod
    def format(cls: Any, value: Optional[bool]) -> str: ...

class Temperature(Sensor[Optional[float]]):
    title: str = ...
    def value(self) -> Optional[float]: ...
    @staticmethod
    def celsius_to_fahrenheit(value: float) -> float: ...
    @classmethod
    def format(cls: Any, value: Optional[float]) -> str: ...

class RelativeHumidity(Sensor[Optional[float]]):
    title: str = ...
    def value(self) -> Optional[float]: ...
    @classmethod
    def format(cls: Any, value: Optional[float]) -> str: ...

def get_sensors() -> Iterable[Sensor[Any]]: ...
def show_sensors() -> None: ...
